#!/usr/bin/env python3
#
# Copyright (C) 2022 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

'''Take the output of 2 commands `oc get -o json apirequestcounts`
before and after a workload run and display which API will be removed
in the future.
'''

import json
import sys


def k8s2ocp(kver):
    return str(float(kver) + 2.87)


def extract_api_info(in_dict, out_dict):
    for item in in_dict["items"]:
        if "removedInRelease" in item["status"]:
            data = {}
            for nodes_info in item["status"]["last24h"]:
                if nodes_info["requestCount"] > 0:
                    for node_info in nodes_info['byNode']:
                        if "byUser" in node_info:
                            for info in node_info["byUser"]:
                                try:
                                    data[info["userAgent"]] += info["requestCount"]
                                except KeyError:
                                    data[info["userAgent"]] = info["requestCount"]
                            for key in data:
                                out_dict[(item['metadata']['name'], key)] = (data[key],
                                                                             item["status"]["removedInRelease"])


def compute_removed_apis(before, after, output):
    before_dict = {}
    extract_api_info(before, before_dict)
    after_dict = {}
    extract_api_info(after, after_dict)
    count = 0
    for api_name, user_agent in after_dict:
        if ((api_name, user_agent) not in before_dict or
            after_dict[(api_name, user_agent)][0] > before_dict[(api_name, user_agent)][0]):
            print(f"API {api_name} is used by {user_agent} and will be removed "
                  f"in OCP {k8s2ocp(after_dict[(api_name, user_agent)][1])}",
                  file=output)
            count += 1
    if count == 0:
        print("No removed API", file=output)


def main(args):
    if len(args) not in (3, 4):
        print(f"Usage: {argv[0]} <apirequestcounts.before.json> <apirequestcounts.after.json> [<output filename>]",
              file=sys.stderr)
        return 1
    with open(sys.argv[1]) as before_stream:
        before = json.load(before_stream)
    with open(sys.argv[2]) as after_stream:
        after = json.load(after_stream)
    if len(args) == 4:
        with open(sys.argv[3], "w") as output:
            compute_removed_apis(before, after, output)
    else:
        compute_removed_apis(before, after, sys.stdout)
    return 0


if __name__ == "__main__":
    sys.exit(main(sys.argv))

# compute_removed_apis ends here
