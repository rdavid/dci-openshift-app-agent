---
# Check if KUBECONFIG is present

- name: "Read KUBECONFIG path from env vars"
  set_fact:
    kubeconfig_path: "{{ lookup('env','KUBECONFIG') }}"
  when: kubeconfig_path is not defined

- name: "Check if KUBECONFIG exists"
  stat:
    path: "{{ kubeconfig_path }}"
  register: kubeconfig

- name: "Fail if kubeconfig NOT found"
  fail:
    msg: "kubeconfig not found at {{ kubeconfig_path }}"
  when: not kubeconfig.stat.exists

- name: "Temp directory for stable clients"
  tempfile:
    state: directory
    prefix: dci_app_agent.
  register: client_tmp_dir

- name: "Download stable clients"
  unarchive:
    src: "{{ item }}"
    dest: "{{ client_tmp_dir.path }}"
    remote_src: true
    mode: 0755
  loop:
    - "{{ ocp_clients_url }}/stable/opm-linux.tar.gz"
    - "{{ ocp_clients_url }}/stable/openshift-client-linux.tar.gz"

- name: "Set client paths"
  set_fact:
    oc_tool_path: "{{ client_tmp_dir.path }}/oc"
    opm_tool_path: "{{ client_tmp_dir.path }}/opm"

- name: "Get cluster version"
  community.kubernetes.k8s_info:
    api: config.openshift.io/v1
    kind: ClusterVersion
    name: version
    kubeconfig: "{{ kubeconfig_path }}"
  register: cluster_version

- name: "Get cluster name"
  community.kubernetes.k8s_info:
    kind: ConfigMap
    namespace: kube-system
    name: cluster-config-v1
    kubeconfig: "{{ kubeconfig_path }}"
  register: cluster_config

- name: "Set OCP name and version facts"
  vars:
    current_ver_query: "history[?state=='Completed'] | [0].version"
    full_ver: "{{ cluster_version.resources[0].status | json_query(current_ver_query) }}"
    current_ver: "{{ full_ver.split('-')[0] }}"
    cluster_install_info: |-
      {{ ( cluster_config.resources[0].data |
      from_yaml )['install-config'] |
      from_yaml }}
  set_fact:
    cluster_name: "{{ cluster_install_info.metadata.name }}"
    cluster_domain: "{{ cluster_install_info.baseDomain }}"
    ocp_version_full: "{{ full_ver }}"
    ocp_version: "{{ current_ver.split('.')[0:2] | join('.') }}"
    ocp_version_maj: "{{ current_ver.split('.')[0] }}"
    ocp_version_min: "{{ current_ver.split('.')[1] }}"
    ocp_version_patch: "{{ current_ver.split('.')[2] }}"
  when:
    - cluster_config | length
    - cluster_version | length

- name: "Fail if the ocp version is not set"
  fail:
    msg: "OCP version is not set"
  when: not ocp_version

- name: "Set dci_topic"
  set_fact:
    dci_topic: "OCP-{{ ocp_version }}"

# get ocp component

- name: Get the ocp component id filename
  set_fact:
    ocp_comp_path: "/tmp/{{ cluster_name }}.ocp_prod_id"
  when:
    - ocp_component_id is not defined
    - ocp_comp_path is not defined

- name: Test ocp component id filename
  stat:
    path: "{{ ocp_comp_path }}"
  register: ocp_comp_file
  when:
    - ocp_comp_path is defined

- name: Get the ocp component id from file content
  set_fact:
    ocp_component_id: "{{ lookup('file', ocp_comp_path) }}"
  when:
    - ocp_component_id is not defined
    - ocp_comp_file is defined
    - ocp_comp_file.stat.exists

- name: Lookup ocp component from oc version
  block:
    - name: Find the corresponding ocp topic
      dci_topic:
        state: search
        name: "{{ dci_topic }}"
      register: dci_topics
      tags: [dci]
      ignore_errors: true

    - name: Find the corresponding ocp components
      dci_component:
        name: "{{ ocp_version_full }}"
        topic_id: "{{ dci_topics.topics[0].id }}"
        type: ocp
        state: search
      when:
        - "dci_topics is defined"
        - "dci_topics.topics|length >= 1"
      register: ocp_components
      tags: [dci]
      ignore_errors: true

    - name: get ocp component from previous job
      set_fact:
        ocp_component_id: "{{ ocp_components.components[0].id }}"
      when:
        - "ocp_components is defined"
        - "'components' in ocp_components"
        - "ocp_components.components|length == 1"
        - "'id' in ocp_components.components[0]"
      tags: [dci]

  when: "ocp_component_id is not defined"

- name: Display ocp_component_id
  debug:
    msg: "{{ ocp_component_id }}"
  when: "ocp_component_id is defined"

- name: "Fail if unable to find ocp_component_id"
  fail:
    msg: "Unable to find the DCI component corresponding to the version of OCP {{ ocp_version_full }}"
  when: ocp_component_id is not defined
  tags: [dci]
