#!/bin/bash
#
# Copyright (C) 2021-2022 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.


ANSIBLE_PID=
JOB_ID_FILE=
OUTPUT_DIR=
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
start=0
params="$(getopt -o hsdp:c:v -l help,start,dev,prefix:,config:,verbose --name "$(basename -- "$0")" -- "$@")"
DCI_VAULT_CLIENT=${DCI_VAULT_CLIENT:=/usr/bin/dci-vault-client}

function usage ()
{
    name=$(basename -- "$0")
    cat << EOF
Usage: $name [-h] [-s] [-d] [-v] [-p PREFIX] [-c CONFIG] -- [ansible-playbook args]

arguments:
    -h, --help        Display this help message.
    -s, --start       Start the dci-openshift-app-agent.
    -p PREFIX, --prefix PREFIX
                      Specify prefix for Inventory and settings (use to specify different
                      clusters for example)
    -d, --dev         Use script directory to find dcirc.sh and dci-openshift-app-agent.yml (for dev usage)
    -c CONFIG, --config CONFIG
                      Path to config file. default is /etc/dci-openshift-app-agent/settings.yml
    -v, --verbose     Display commands
EOF
    exit $1
}

function finish ()
{
    echo "finish $*"

    if [ -n "${ANSIBLE_PID}" ]; then
        PGID=$(ps -o pgid= ${ANSIBLE_PID} | grep -o [0-9]*)

        if [ -n "${ANSIBLE_PID}" ]; then
            kill -KILL -$PGID
        else
            echo "Unable to find process group for ${ANSIBLE_PID}"
            kill ${ANSIBLE_PID}
        fi

        wait ${ANSIBLE_PID}
        RET=$?
    fi

    if [ -f "${JOB_ID_FILE}" ] && [ -d "${OUTPUT_DIR}" ]; then
        JOB_ID=$(cat ${JOB_ID_FILE})
        if [ -n "$JOB_ID" ]; then
            find "$OUTPUT_DIR" -maxdepth 1 -name "*.xml" -type f -exec sh -c ' \
                dcictl job-upload-file \
                    --name $(basename $1 .xml) \
                    --path $1 \
                    --mime application/junit $2 \
                ' _ {} "$JOB_ID" \;
            if [ -r ${OUTPUT_DIR}/ansible.log ]; then
               dcictl job-upload-file --name ansible.log --path ${OUTPUT_DIR}/ansible.log  --mime text/plain ${JOB_ID}
            fi
        fi
        echo "removing output dir: ${OUTPUT_DIR}"
        rm -rf "${OUTPUT_DIR}"
    fi
    exit $RET
}

trap finish 0

function interrupt() {
    if [ -r "${JOB_ID_FILE}" ]; then
        JOB_ID=$(cat ${JOB_ID_FILE})
        dcictl jobstate-create --job-id ${JOB_ID} --comment "doaa was interrupted" --status killed
        exit 1
    fi
}

trap interrupt INT TERM

if [ -r /etc/dci-openshift-app-agent/config ]; then
    . /etc/dci-openshift-app-agent/config
fi

config_dir=${CONFIG_DIR:-/etc/dci-openshift-app-agent}
config=$config_dir/settings.yml
extra_args=--syntax-check

eval set -- "$params"
unset params

while true
do
    case $1 in
        -h|--help)
            usage 0
        ;;
        -s|--start)
            start=1
            extra_args=
            shift
        ;;
        -d|--dev)
            dev=1
            sed -e "s@/etc/dci-openshift-app-agent/@$DIR/@" -e "s@\(roles_path\s*=\s*\)/@\1$DIR/roles:/@" < $DIR/ansible.cfg > $DIR/dev-ansible.cfg
            if [ -n "$DCI_ANSIBLE_DIR" ]; then
                sed -i -e "s@/usr/share/dci/\(modules\|module_utils\|action_plugins\)@$DCI_ANSIBLE_DIR/\1@g" -e "s@/usr/share/dci/callback/@$DCI_ANSIBLE_DIR/callback/@" dev-ansible.cfg
            fi
            if [ -n "$DCI_ANSIBLE_ROLES" ]; then
                sed -i -e "s@\(roles_path\s*=\s*\)@\1${DCI_ANSIBLE_ROLES}:@" dev-ansible.cfg
            fi
            config_dir="$DIR"
            config="$config_dir/settings.yml"
            DCI_OPENSHIFT_APP_AGENT_DIR="$DIR"
            shift
        ;;
        -c|--config)
            shift
            config="$1"
            shift
        ;;
        -p|--prefix)
            shift
            prefix=$1
            shift
        ;;
        -v|--verbose)
            set -x
            shift
            ;;
        --)
            shift
            break
        ;;
        *)
            usage 1
        ;;
    esac
done

if [ -n "$prefix" ]; then
    settings="$config_dir/${prefix}-settings.yml"
    if [ -r "$settings" ]; then
        settings_args="$settings"
    else
        echo "Missing $settings, will only use $config."
        settings_args="$config"
    fi

    hosts="$config_dir/${prefix}-hosts"
    if [ -r "$hosts" ]; then
        hosts_args="-i ${hosts}"
    elif [ -r "${hosts}.yml" ]; then
        hosts_args="-i ${hosts}.yml"
    elif [ -r "${config_dir}/hosts" ]; then
        hosts_args="-i ${config_dir}/hosts"
    else
        echo "Missing $hosts(.yml) or ${config_dir}/hosts"
    fi
else
    if [ -r ${config_dir}/hosts ]; then
        hosts_args="-i ${config_dir}/hosts"
    elif [ -r "${config_dir}/hosts.yml" ]; then
        hosts_args="-i ${config_dir}/hosts.yml"
    else
        echo "Missing ${config_dir}/hosts(.yml)"
    fi
    settings_args="$config"
fi

if [ "$start" != 1 ]; then
    echo "Dry-Run: pass -s or --start to actually execute. Running a syntax check instead:"
fi

set -x

if [ -z "$dev" ]; then
    [ -e /etc/dci-openshift-app-agent/dcirc.sh ] && . /etc/dci-openshift-app-agent/dcirc.sh
    DCI_OPENSHIFT_APP_AGENT_DIR=${DCI_OPENSHIFT_APP_AGENT_DIR:-/usr/share/dci-openshift-app-agent}
    export ANSIBLE_CONFIG=${DCI_OPENSHIFT_APP_AGENT_DIR}/ansible.cfg
    [ -d ${DCI_OPENSHIFT_APP_AGENT_DIR} ] && cd ${DCI_OPENSHIFT_APP_AGENT_DIR}
else
    [ -e $DIR/dcirc.sh ] && . $DIR/dcirc.sh
    export ANSIBLE_CONFIG=$DIR/dev-ansible.cfg
fi


if [ "$start" -eq 1 ]; then
    OUTPUT_DIR="$(mktemp -d /tmp/dci-openshift-app-agent.XXXXX)"
    cd "${OUTPUT_DIR}" || exit 1
    JOB_ID_FILE="$OUTPUT_DIR/dci-openshift-app-agent.job"
    export ANSIBLE_LOG_PATH=${OUTPUT_DIR}/ansible.log
    export JUNIT_OUTPUT_DIR=${OUTPUT_DIR}
    export JUNIT_TEST_CASE_PREFIX=test_
    export JUNIT_TASK_CLASS=yes
    setsid ansible-playbook \
        --vault-id "$DCI_VAULT_CLIENT" \
        ${extra_args} \
        ${DCI_OPENSHIFT_APP_AGENT_DIR}/dci-openshift-app-agent.yml \
        -e JOB_ID_FILE="${JOB_ID_FILE}" \
        -e @"${settings_args}" \
        ${hosts_args} \
        "$@" &
    ANSIBLE_PID=$!
    wait ${ANSIBLE_PID}
    RET=$?
    ANSIBLE_PID=
    exit $RET
fi

# dci-openshift-app-agent-ctl ends here
