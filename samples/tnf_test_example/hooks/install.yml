---
- name: Check if there are RuntimeClass resources installed
  community.kubernetes.k8s_info:
    api_version: node.k8s.io/v1
    kind: RuntimeClass
  register: runtime_class_check

- name: Take the first RuntimeClass if exists and extract its name
  set_fact:
    runtime_class_name: "{{ runtime_class_check.resources[0].metadata.name }}"
  when: runtime_class_check.resources|length

# We are going to use local volumes without using local storage operator just for simplicity
- name: Create local-storage StorageClass
  community.kubernetes.k8s:
    state: present
    definition:
      apiVersion: storage.k8s.io/v1
      kind: StorageClass
      metadata:
        name: local-storage
      provisioner: kubernetes.io/no-provisioner
      volumeBindingMode: WaitForFirstConsumer

# Check if Aspenmesh is currently deployed to check if we can use service-mesh capabilities in
# the pods under test.
- name: Check Aspenmesh resources
  include_tasks: check_aspenmesh.yml
  when: tnf_enable_service_mesh | default(false) | bool

# If the namespace is dci_openshift_app_ns, its creation is handled in
# d-o-a-a plays, so we do not need to do that here.
# exclude_connectivity_regexp is not checked because it is optional.
- name: Create namespaces and deploy test resources on each namespace if not done before
  include_tasks: deploy_resources_in_ns.yml
  vars:
    app_ns: "{{ pods_in_same_ns.namespace }}"
    targetpodlabels: "{{ pods_in_same_ns.targetpodlabels }}"
    target_crds: "{{ pods_in_same_ns.target_crds }}"
    exclude_connectivity_regexp: "{{ pods_in_same_ns.exclude_connectivity_regexp|default('') }}"
  when:
    - tnf_config is defined
    - tnf_config|length
    - pods_in_same_ns.namespace is defined
    - pods_in_same_ns.namespace|length
    - pods_in_same_ns.targetpodlabels is defined
    - pods_in_same_ns.targetpodlabels is iterable
    - pods_in_same_ns.target_crds is defined
    - pods_in_same_ns.target_crds is iterable
  loop: "{{ tnf_config }}"
  loop_control:
    loop_var: pods_in_same_ns

- name: Create NetworkPolicies for the pods deployed to allow inter-intra namespaces traffic
  community.kubernetes.k8s:
    state: present
    definition: "{{ lookup('template', 'templates/network_policies_allow_traffic.yml.j2') | from_yaml }}"
  when:
    - tnf_config is defined
    - tnf_config|length

# Install the Helm chart and the operator in test-cnf namespace
- name: Set target_ns variable
  set_fact:
    target_ns: "{{ tnf_config[0].namespace|default('test-cnf') }}"

- name: Deploy operator
  include_tasks: deploy_operator.yml

- name: Deploy Helm chart
  include_tasks: deploy_helm_chart.yml

...
